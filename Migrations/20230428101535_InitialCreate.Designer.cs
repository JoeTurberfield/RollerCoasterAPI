// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RollerCoasterAPI.Models.Data;

#nullable disable

namespace RollerCoasterAPI.Migrations
{
    [DbContext(typeof(RollerCoasterContext))]
    [Migration("20230428101535_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OperatingStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeParkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearOpened")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OperatingStatusId");

                    b.HasIndex("ThemeParkId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ErrorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturerers");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteTypeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NoteType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            Type = "HighPriority"
                        },
                        new
                        {
                            Id = 3,
                            Type = "LowPriority"
                        });
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.OperatingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperatingStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Operating"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Closed"
                        },
                        new
                        {
                            Id = 3,
                            Status = "UnderConstruction"
                        },
                        new
                        {
                            Id = 4,
                            Status = "SBNO"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Demolished"
                        });
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("TypeId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.RideType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RideType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "FlatRide"
                        },
                        new
                        {
                            Id = 2,
                            Type = "DarkRide"
                        },
                        new
                        {
                            Id = 3,
                            Type = "WaterRide"
                        },
                        new
                        {
                            Id = 4,
                            Type = "TransportRide"
                        },
                        new
                        {
                            Id = 5,
                            Type = "TracklessRide"
                        });
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.RollerCoaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<decimal>("MaxSpeed")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("RollerCoasterDesignId")
                        .HasColumnType("int");

                    b.Property<int>("RollerCoasterTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TrackLength")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("RollerCoasterDesignId");

                    b.HasIndex("RollerCoasterTypeId");

                    b.ToTable("RollerCoasters");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.RollerCoasterDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Design")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RollerCoasterDesign");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Design = "SitDown"
                        },
                        new
                        {
                            Id = 2,
                            Design = "Inverted"
                        },
                        new
                        {
                            Id = 3,
                            Design = "Suspended"
                        },
                        new
                        {
                            Id = 4,
                            Design = "Wing"
                        },
                        new
                        {
                            Id = 5,
                            Design = "Flying"
                        },
                        new
                        {
                            Id = 6,
                            Design = "StandUp"
                        },
                        new
                        {
                            Id = 7,
                            Design = "Bobsled"
                        },
                        new
                        {
                            Id = 8,
                            Design = "Pipeline"
                        },
                        new
                        {
                            Id = 9,
                            Design = "Spinning"
                        },
                        new
                        {
                            Id = 10,
                            Design = "FourDimensional"
                        });
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.RollerCoasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RollerCoasterType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Wooden"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Steel"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Hybrid"
                        });
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.ThemePark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("ThemeParkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ThemeParks");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Member")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Attraction", b =>
                {
                    b.HasOne("RollerCoasterAPI.Models.Classes.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerCoasterAPI.Models.Classes.OperatingStatus", "OperatingStatus")
                        .WithMany()
                        .HasForeignKey("OperatingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerCoasterAPI.Models.Classes.ThemePark", "ThemePark")
                        .WithMany()
                        .HasForeignKey("ThemeParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("OperatingStatus");

                    b.Navigation("ThemePark");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Note", b =>
                {
                    b.HasOne("RollerCoasterAPI.Models.Classes.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.Ride", b =>
                {
                    b.HasOne("RollerCoasterAPI.Models.Classes.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerCoasterAPI.Models.Classes.RideType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.RollerCoaster", b =>
                {
                    b.HasOne("RollerCoasterAPI.Models.Classes.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerCoasterAPI.Models.Classes.RollerCoasterDesign", "RollerCoasterDesign")
                        .WithMany()
                        .HasForeignKey("RollerCoasterDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerCoasterAPI.Models.Classes.RollerCoasterType", "RollerCoasterType")
                        .WithMany()
                        .HasForeignKey("RollerCoasterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("RollerCoasterDesign");

                    b.Navigation("RollerCoasterType");
                });

            modelBuilder.Entity("RollerCoasterAPI.Models.Classes.ThemePark", b =>
                {
                    b.HasOne("RollerCoasterAPI.Models.Classes.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
